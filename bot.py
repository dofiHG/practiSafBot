from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from tabulate import tabulate

import protocol
from cfg import BOT_TOKEN

bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start', 'help'])
async def help(message: types.Message):
    await bot.send_message(message.chat.id,
                            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
                            'üëÄ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: <u><b>/help</b></u>\n'
                            '‚úÖ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞: <u><b>/add</b></u>\n'
                            '‚ùå –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞: <u><b>/del</b></u>\n'
                            '‚úâ –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω–∞ –ø–æ—á—Ç—É: <u><b>/send</b></u>\n'
                            'üí£ –î–ª—è –ü–û–õ–ù–û–ô –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: <u><b>/del_all</b></u>',
                            parse_mode="HTML")

@dp.message_handler(commands=['add'])
async def add(message: types.Message):
    await bot.send_message(message.chat.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–≥—Ä—É–¥–Ω—ã–π –Ω–æ–º–µ—Ä, –§–ò–û, –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –≤–∏–¥, —Ä–µ–∑—É–ª—å—Ç–∞—Ç')

@dp.message_handler(commands='del')
async def delite(message: types.Message):
    await message.answer(text = 'üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')

@dp.message_handler(commands='del_all')
async def delete_all(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb1 = KeyboardButton('–î–∞')
    kb2 = KeyboardButton('–ù–µ—Ç')
    kb.add(kb1, kb2)
    await message.answer(text = '‚ùó‚ùó‚ùó –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –ø–æ–ª–Ω–æ–π –∏ –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û–ô –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? ‚ùó‚ùó‚ùó',
                         reply_markup=kb)

@dp.message_handler(commands='send')
async def send(message: types.Message):
    res = protocol.send()
        
    with open('tosend.txt', 'w+') as pr_file:
        headers = ['–ù–æ–º–µ—Ä', '–§–ò–û', '–ü–æ–ª', '–í–æ–∑—Ä–∞—Å—Ç', '–í–∏–¥', '–†–µ–∑—É–ª—å—Ç–∞—Ç']
        pr_file.write(tabulate(res, headers=headers, tablefmt='grid'))

    try:
        with open('tosend.txt', 'rb') as prtocol_file:    
            await message.answer_document(prtocol_file)
    except:
        await message.answer(text = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!')

@dp.message_handler()
async def tobd(message: types.Message):

    if message.text.__contains__(','):
        arr = message.text.split(',')
        if len(arr) != 6:
            await message.answer(text='üö´–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ!')
        else:
            reuslt_add = protocol.add_sport(arr)
            await message.answer(text=reuslt_add)

    elif message.text == '–î–∞':
        protocol.del_all()
        await message.answer(text = '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!', reply_markup=ReplyKeyboardRemove())

    elif message.text == '–ù–µ—Ç':
        await message.answer(text = '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=ReplyKeyboardRemove())

    else:
        try:
            int(message.text)
            result_del = protocol.del_sport(message.text)
            await message.answer(text=result_del)
        except:
            await message.answer(text = 'üö´–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω—ã–Ω—ã–µ!')
    

async def on_startup(_):
    print('–†–∞–±–æ—Ç–∞–µ–º')

async def on_shutdown(_):
    print('–ù–ï —Ä–∞–±–æ—Ç–∞–µ–º')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)

#–î–û–ë–ê–í–ò–¢–¨ –ö–ù–û–ü–ö–ò –°–ë–û–ö–£ –î–õ–Ø –ë–´–°–¢–†–û–ì–û –ù–ê–ë–û–†–ê